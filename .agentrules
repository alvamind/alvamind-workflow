# Alvamind Workflow Project Intelligence

## Coding Patterns
- Use TypeScript for all implementation files
- Follow ESM module format (import/export)
- Use Promise-based async/await patterns for asynchronous operations
- Use chalk for terminal output formatting
- Leverage fluent interfaces for builder patterns
- Apply type generics for improved type safety
- Follow command pattern for workflow steps
- Use context pattern to maintain workflow state

## Project Structure
- Source code in src/ directory
- Compiled output in dist/ directory
- Main entry point is index.ts
- CLI entry point is cli.ts
- Tests in test/ directory

## Style Preferences
- Use camelCase for variable and function names
- Use PascalCase for interface and type names
- Use template literals for string interpolation
- Prefer arrow functions for callbacks
- Use explicit return types for public functions
- Use generics for type-safe operations

## Error Handling
- Use try/catch blocks for error handling
- Provide detailed error messages with context
- Allow for graceful recovery where possible
- Use skippable flag for non-critical commands
- Validate dependencies before execution

## Documentation
- Use JSDoc comments for public APIs
- Provide examples for complex functionality
- Keep README up to date with latest features
- Use code blocks for examples
- Document new features in memory-bank

## Testing
- Use small, focused tests
- Test both success and failure paths
- Mock external dependencies
- Include tests for conditional execution
- Test dependency relationships

## Workflow Execution
- Commands should be executed in order
- Provide real-time feedback during execution
- Track and display execution time
- Allow for interactive recovery from failures
- Check conditions before execution
- Validate dependencies before execution
- Maintain workflow context between steps
- Use typed IDs for referencing previous steps
